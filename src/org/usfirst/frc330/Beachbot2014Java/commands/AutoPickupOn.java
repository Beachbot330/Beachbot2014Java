// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
package org.usfirst.frc330.Beachbot2014Java.commands;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc330.Beachbot2014Java.Robot;
/**
 *
 */
public class  AutoPickupOn extends Command {
    static final char STATE_WAIT_FOR_ARM = 0;
    static final char STATE_WAIT_FOR_BALL = 1;
    static final char STATE_TEST_BALL = 2;
    static final char STATE_HOLD_BALL = 3;
    static final char STATE_MOVE_ARM_BACK_TO_PICKUP = 4;
    int state = 0;
    public AutoPickupOn() {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);
	
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.pickup);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.arm);
    }
    // Called just before this Command runs the first time
    protected void initialize() {
        state = STATE_WAIT_FOR_ARM;
    }
    
    // Called repeatedly when this Command is scheduled to run
    boolean direction = false;
    protected void execute() {
        switch (state) {
            case STATE_WAIT_FOR_ARM:
                if (Robot.arm.getArmPosition() < Robot.arm.getArmFrontLoading()) {
                    direction = false;
                    state = STATE_WAIT_FOR_BALL;
                }
                else if (Robot.arm.getArmPosition() > Robot.arm.getArmBackLoading()) {
                    direction = true;
                    state = STATE_WAIT_FOR_BALL;
                }
                break;
            case STATE_WAIT_FOR_BALL:
                Robot.pickup.pickupPulse(direction);
                
                if (Robot.pickup.isBallHeld())
                {
                    state = STATE_TEST_BALL;
                    if (direction) {
                        Robot.arm.set(0.2);
                    }
                    else {
                        Robot.arm.set(-0.2);
                    }
                }
            case STATE_TEST_BALL:    
                Robot.pickup.pickupPulse(direction);
                if (direction) {
                    if (Robot.arm.getArmPosition() > Robot.arm.getArmFrontCheckPickup()) {
                        Robot.arm.set(0);
                    }
                } else {
                    if (Robot.arm.getArmPosition() < Robot.arm.getArmBackCheckPickup()) {
                        Robot.arm.set(0);
                    }
                }
        }
    }
    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return false;
    }
    // Called once after isFinished returns true
    protected void end() {
    }
    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}

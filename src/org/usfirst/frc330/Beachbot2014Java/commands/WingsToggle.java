// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
package org.usfirst.frc330.Beachbot2014Java.commands;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc330.Beachbot2014Java.Robot;
/**
 * Toggles the wings. Does not return until the wings have finished moving 
 * (based on limit switches and the Preference WingsOpenWait. Does not use parameters.
 * Uses the commanded state of the wings, so that it can be called while a previously
 * commanded WingsOpen or WingsClose are still running.
 */
public class  WingsToggle extends Command {
    boolean state = false;
    public WingsToggle() {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);
	
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.wings);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        state = false;
    }
    // Called just before this Command runs the first time
    protected void initialize() {
        state = Robot.wings.areWingsOpenUnsafe();
        if (state)
            Robot.wings.setWingsClose();
        else
            Robot.wings.setWingsOpen();
    }
    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
        if (state)
            Robot.wings.setWingsClose();
        else
            Robot.wings.setWingsOpen();
    }
    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return state != Robot.wings.areWingsOpen();
    }
    // Called once after isFinished returns true
    protected void end() {
    }
    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}

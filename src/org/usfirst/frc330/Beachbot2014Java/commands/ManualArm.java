// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
package org.usfirst.frc330.Beachbot2014Java.commands;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import org.usfirst.frc330.Beachbot2014Java.Robot;
/**
 *
 */
public class  ManualArm extends Command {
    public ManualArm() {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);
	
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.arm);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.wings);
    }
    // Called just before this Command runs the first time
    protected void initialize() {
//        Robot.wings.setWingsOpen();
        Robot.arm.stopArm();
    }
    // Called repeatedly when this Command is scheduled to run
    int counter = 0;
    protected void execute() {
//        if (Robot.arm.areWingsSafeToClose() || Robot.wings.areWingsOpen())
            Robot.arm.manualArm();
//       else
//            Robot.arm.stopArm();
    }
    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return false;
    }
    // Called once after isFinished returns true
    protected void end() {
//        Robot.arm.stopArm();
//        if (Robot.arm.areWingsSafeToClose())
//            Robot.wings.setWingsClose();
        if (!Robot.arm.isEnable()) {
//            Robot.arm.setArmSetPoint(Robot.arm.getArmPosition());
//            Robot.arm.enable();
            Robot.arm.set(0);
        }
    }
    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
        end();
    }
}

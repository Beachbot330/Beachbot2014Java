// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
package org.usfirst.frc330.Beachbot2014Java.commands;
import edu.wpi.first.wpilibj.command.AutoSpreadsheetCommand;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
/*
 * $Log: AutoWait.java,v $
 * Revision 1.2  2013-03-16 21:17:47  jross
 * add javadocs
 *
 * Revision 1.1  2013-03-03 03:27:25  jross
 * Add AutoWait to wait a user configurable amount of time
 *
 * Revision 1.4  2013-01-18 04:06:41  jross
 * Put AutoWait to SmartDashboard in constructor so it is availible to change
 *
 * Revision 1.3  2013-01-03 04:54:13  jross
 * Whitespace changes from RobotBuilder
 *
 * Revision 1.2  2013-01-02 04:38:12  jross
 * Read wait from Network Tables
 *
 */
/**
 * Do nothing until the timeout elapses. Get the timeout from the NetworkTable 
 * variable "AutoWait". This is defined on the dashboard.
 * @author Joe Ross
 */
public class AutoWait extends Command implements AutoSpreadsheetCommand {
    
    public AutoWait() {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        SmartDashboard.putNumber("AutoWait", 0);
    }
    // Called just before this Command runs the first time
    protected void initialize() {
        setTimeout(SmartDashboard.getNumber("AutoWait", 0));
    }
    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    }
    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return isTimedOut();
    }
    // Called once after isFinished returns true
    protected void end() {
    }
    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }    
    
    /**
     * Not Used
     * @param param1 
     */
    public void setParam1(double param1) {
    }
    /**
     * Not Used
     * @param param2 
     */
    public void setParam2(double param2) {
    }
    /**
     * Not Used
     * @param param3 
     */
    public void setParam3(double param3) {
    }
    /**
     * Not used
     * @param stopAtEnd 
     */
    public void setStopAtEnd(boolean stopAtEnd) {
    }
    public Command copy() {
        return new AutoWait();
    }


}

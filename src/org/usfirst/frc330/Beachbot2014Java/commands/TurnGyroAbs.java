// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
package org.usfirst.frc330.Beachbot2014Java.commands;
import edu.wpi.first.wpilibj.command.AutoSpreadsheetCommand;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc330.Beachbot2014Java.Robot;
import org.usfirst.frc330.Beachbot2014Java.subsystems.Chassis;
/**
 *
 */
public class  TurnGyroAbs extends Command implements AutoSpreadsheetCommand {
    double angle, tolerance;
    boolean stopAtEnd = false;
    boolean enable = true;
    
    public TurnGyroAbs(double angle) {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);
        this(angle, 0, 15, false);
    }
    
    public TurnGyroAbs(double angle, double tolerance)
    {
        this(angle, tolerance, 15, false);
    
    }
    
    public TurnGyroAbs(double angle, double tolerance, double timeout, boolean stopAtEnd) {
        this(angle, tolerance, timeout, stopAtEnd, true);
    }
    
    public TurnGyroAbs(double angle, double tolerance, double timeout, boolean stopAtEnd, boolean enable) {
                // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);
	
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.chassis);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        this.angle = angle;
        this.tolerance = tolerance;
        setTimeout(timeout);
        this.stopAtEnd = stopAtEnd;
        this.enable = enable;
    }
    // Called just before this Command runs the first time
    protected void initialize() {
        Robot.chassis.leftDrivePID.disable();
        Robot.chassis.rightDrivePID.disable();  
        if (!Robot.chassis.getShiftState())
        {
            Robot.chassis.gyroPID.setGainName(Chassis.TURNLOW);
        }
        else
        {
            Robot.chassis.gyroPID.setGainName(Chassis.TURNHIGH);
        }
        Robot.chassis.gyroPID.setAbsoluteTolerance(tolerance);
        Robot.chassis.gyroPID.setSetpoint(angle);
        System.out.println("TurnGyroAbs Enable: " + enable);
        System.out.println("TurnGyroAbs Name: " + Robot.chassis.gyroPID.getGainName());
        System.out.println("TurnGyroAbs P: " + Robot.chassis.gyroPID.getP());
        if (enable) 
            Robot.chassis.gyroPID.enable();
    }
    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    }
    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        if (Robot.chassis.gyroPID.onTarget() || isTimedOut())
        {
            return true;
        }
        return false;
    }
    // Called once after isFinished returns true
    protected void end() {
        if (stopAtEnd)
        {
            Robot.chassis.stopDrive();
        }
    }
    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
        stopAtEnd = true;
        end();
    }
    /**
     * The first parameter in the AutoSpreadsheet, angle.
     * The angle in degrees to turn to, relative to the starting location of the robot.
     * @param angle in degrees.
     */
    public void setParam1(double angle) {
        this.angle = angle;
    }
     /**
     * The second parameter in the AutoSpreadsheet, tolerance. 
     * The tolerance in degrees for how close to be to the distance before stopping.
     * 5 degrees is a reasonable tolerance for normal movements. If a smaller
     * tolerance is used, the robot may not ever reach the tolerance, and the 
     * {@link #setTimeout(double) timeout} may be reached.
     * @param tolerance in inches
     * @see edu.wpi.first.wpilibj.PIDController#setAbsoluteTolerance
     */
    public void setParam2(double tolerance) {
        this.tolerance = tolerance;
    }
    public void setParam3(double param3) {
    }
    public void setStopAtEnd(boolean stopAtEnd) {
        this.stopAtEnd = stopAtEnd;
    }
    public Command copy() {
        return new TurnGyroAbs(0);
    }
}

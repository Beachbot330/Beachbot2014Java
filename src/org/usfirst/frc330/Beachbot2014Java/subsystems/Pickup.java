// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
package org.usfirst.frc330.Beachbot2014Java.subsystems;
import org.usfirst.frc330.Beachbot2014Java.RobotMap;
import org.usfirst.frc330.Beachbot2014Java.commands.*;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.command.Subsystem;
import org.usfirst.frc330.Beachbot2014Java.Robot;
/**
 *
 */
public class Pickup extends Subsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    SpeedController pickup1 = RobotMap.pickupPickup1;
    SpeedController pickup2 = RobotMap.pickupPickup2;
    AnalogChannel currentSensor = RobotMap.pickupCurrentSensor;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }
    
    public void InitializePickupMotorForward()
    {
        if (!Preferences.getInstance().containsKey("PickupMotorOutputForward"))
        {
            Preferences.getInstance().putDouble("PickupMotorOutputForward", 1);
            Preferences.getInstance().save();
        }
    }
    
    public void InitializePickupMotorReverse()
    {
        if (!Preferences.getInstance().containsKey("PickupMotorOutputReverse"))
        {
            Preferences.getInstance().putDouble("PickupmotorOutputReverse", -1);
            Preferences.getInstance().save();
        }
    }
    
    public void setPickupMotorOff() {
        pickup1.set(0);
        pickup2.set(0);
    }
    
    public void setPickupMotorForward() {
        pickup1.set(Preferences.getInstance().getDouble("PickupMotorOutputForward",
                                                        1));
        pickup2.set(-Preferences.getInstance().getDouble("PickupMotorOutputForward",
                                                       1));
    }
    
    public void setPickupMotorReverse() {
        pickup1.set(-Preferences.getInstance().getDouble("PickupMotorOutputReverse",
                                                        1));
        pickup2.set(Preferences.getInstance().getDouble("PickupMotorOutputReverse",
                                                         1));
    }
    
    public void checkCurrentSensor() {
        
    }
}

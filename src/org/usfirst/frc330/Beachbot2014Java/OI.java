// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
package org.usfirst.frc330.Beachbot2014Java;
import org.usfirst.frc330.Beachbot2014Java.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.buttons.JoystickButton;
/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);
    
    // Another type of button you can create is a DigitalIOButton, which is
    // a button or switch hooked up to the cypress module. These are useful if
    // you want to build a customized operator interface.
    // Button button = new DigitalIOButton(1);
    
    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.
    
    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:
    
    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());
    
    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());
    
    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton shiftHighButton;
    public Joystick leftJoystick;
    public JoystickButton shiftLowButton;
    public JoystickButton shootButton;
    public JoystickButton wingOpenButton;
    public Joystick rightJoystick;
    public JoystickButton pickupOffButton;
    public JoystickButton manualArmButton;
    public JoystickButton catchButton;
    public JoystickButton pickupReverseButton;
    public JoystickButton loadShooterButton;
    public JoystickButton pickupForwardButton;
    public JoystickButton wingsToggleButton;
    public Joystick operatorJoystick;
    public KinectStick kinectJoystick;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        kinectJoystick = new KinectStick(1);
        
        operatorJoystick = new Joystick(3);
        
        wingsToggleButton = new JoystickButton(operatorJoystick, 8);
        wingsToggleButton.whenPressed(new WingsToggle());
        pickupForwardButton = new JoystickButton(operatorJoystick, 2);
        pickupForwardButton.whenPressed(new AutoPickupClose());
        loadShooterButton = new JoystickButton(operatorJoystick, 1);
        loadShooterButton.whenPressed(new AutoLoadShooter());
        pickupReverseButton = new JoystickButton(operatorJoystick, 3);
        pickupReverseButton.whenPressed(new AutoPickupFar());
        catchButton = new JoystickButton(operatorJoystick, 6);
        catchButton.whenPressed(new AutoCatch());
        manualArmButton = new JoystickButton(operatorJoystick, 7);
        manualArmButton.whileHeld(new ManualArm());
        pickupOffButton = new JoystickButton(operatorJoystick, 4);
        pickupOffButton.whenPressed(new PickupOff());
        rightJoystick = new Joystick(2);
        
        wingOpenButton = new JoystickButton(rightJoystick, 3);
        wingOpenButton.whenPressed(new WingsOpen());
        shootButton = new JoystickButton(rightJoystick, 1);
        shootButton.whenPressed(new ShootAndCatch());
        shiftLowButton = new JoystickButton(rightJoystick, 2);
        shiftLowButton.whenPressed(new ShiftLow());
        leftJoystick = new Joystick(1);
        
        shiftHighButton = new JoystickButton(leftJoystick, 2);
        shiftHighButton.whenPressed(new ShiftHigh());
	    
        // SmartDashboard Buttons
        SmartDashboard.putData("AutoLoadShooterFront", new AutoLoadShooterFront());
        SmartDashboard.putData("ShiftHigh", new ShiftHigh());
        SmartDashboard.putData("ShiftLow", new ShiftLow());
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
        SmartDashboard.putData("MarsRock", new MarsRock());
        SmartDashboard.putData("Shoot", new Shoot());
        SmartDashboard.putData("ManualArm", new ManualArm());
        SmartDashboard.putData("WingsOpen", new WingsOpen());
        SmartDashboard.putData("WingsClose", new WingsClose());
        SmartDashboard.putData("WingsToggle", new WingsToggle());
        SmartDashboard.putData("PickupForward", new PickupForward());
        SmartDashboard.putData("PickupReversePulse", new PickupReversePulse());
        SmartDashboard.putData("PickupOff", new PickupOff());
        SmartDashboard.putData("PickupReverse", new PickupReverse());
        SmartDashboard.putData("AutoPickupOn", new AutoPickupOn());
        SmartDashboard.putData("PickupForwardPulse", new PickupForwardPulse());
        SmartDashboard.putData("SendDefaultSmartDashboardData", new SendDefaultSmartDashboardData());
        SmartDashboard.putData("ShooterOn", new ShooterOn());
        SmartDashboard.putData("ShooterOff", new ShooterOff());
        SmartDashboard.putData("MoveArmToFrontPickupPosition", new MoveArmToFrontPickupPosition());
        SmartDashboard.putData("MoveArmToFrontBumperPosition", new MoveArmToFrontBumperPosition());
        SmartDashboard.putData("MoveArmToFrontLoadingPosition", new MoveArmToFrontLoadingPosition());
        SmartDashboard.putData("MoveArmToFrontCatchingPosition", new MoveArmToFrontCatchingPosition());
        SmartDashboard.putData("MoveArmToVerticalPosition", new MoveArmToVerticalPosition());
        SmartDashboard.putData("MoveArmToRearPickupPosition", new MoveArmToRearPickupPosition());
        SmartDashboard.putData("MoveArmToRearBumperPosition", new MoveArmToRearBumperPosition());
        SmartDashboard.putData("MoveArmToRearCatchingPosition", new MoveArmToRearCatchingPosition());
        SmartDashboard.putData("MoveArmToRearLoadingPosition", new MoveArmToRearLoadingPosition());
        SmartDashboard.putData("AutoPickupForward", new AutoPickupForward());
        SmartDashboard.putData("CatchWithSensor", new CatchWithSensor());
        SmartDashboard.putData("CheesyDrive", new CheesyDrive());
        SmartDashboard.putData("ShootAndCatch", new ShootAndCatch());
        SmartDashboard.putData("AutoCatch", new AutoCatch());
        SmartDashboard.putData("AutoLoadShooterRear", new AutoLoadShooterRear());
        SmartDashboard.putData("AutoPickupReverse", new AutoPickupReverse());
        SmartDashboard.putData("MoveArmToPickupClose", new MoveArmToPickupClose());
        SmartDashboard.putData("PickupPulse", new PickupPulse());
        SmartDashboard.putData("AutoPickupClose", new AutoPickupClose());
        SmartDashboard.putData("PickupOn", new PickupOn());
        SmartDashboard.putData("MoveArmToLoading", new MoveArmToLoading());
        SmartDashboard.putData("MoveArmToAfterLoading", new MoveArmToAfterLoading());
        SmartDashboard.putData("AutoLoadShooter", new AutoLoadShooter());
        SmartDashboard.putData("AutoPickupFar", new AutoPickupFar());
        SmartDashboard.putData("MoveArmToPickupFar", new MoveArmToPickupFar());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getLeftJoystick() {
        return leftJoystick;
    }
    public Joystick getRightJoystick() {
        return rightJoystick;
    }
    public Joystick getOperatorJoystick() {
        return operatorJoystick;
    }
    public KinectStick getKinectJoystick() {
        return kinectJoystick;
    }
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

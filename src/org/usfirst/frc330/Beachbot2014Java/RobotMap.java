// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
package org.usfirst.frc330.Beachbot2014Java;
    
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.PIDSource.PIDSourceParameter;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import java.util.Vector;
/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static SpeedController chassisLeftDrive1;
    public static SpeedController chassisLeftDrive2;
    public static SpeedController chassisLeftDrive3;
    public static SpeedController chassisRightDrive1;
    public static SpeedController chassisRightDrive2;
    public static SpeedController chassisRightDrive3;
    public static Compressor chassisCompressor;
    public static Relay chassisShiftSpike;
    public static Encoder chassisLeftDriveEncoder;
    public static Encoder chassisRightDriveEncoder;
    public static SpeedController armArm1;
    public static SpeedController armArm2;
    public static AnalogChannel armArmPotentiometer;
    public static Solenoid shooterShooter1;
    public static Solenoid shooterShooter2;
    public static Solenoid shooterShooter3;
    public static Solenoid shooterShooter4;
    public static AnalogChannel shooterShooterUltrasonic;
    public static DoubleSolenoid wingsWingSolenoid;
    public static DigitalInput wingsWingLeftLimitSwitch;
    public static DigitalInput wingsWingRightLimitSwitch;
    public static SpeedController pickupPickup1;
    public static SpeedController pickupPickup2;
    public static AnalogChannel pickupCurrentSensor;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    public static BackgroundCalibratingGyro chassisGyro;
    
    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        chassisLeftDrive1 = new Talon(1, 1);
	LiveWindow.addActuator("Chassis", "LeftDrive1", (Talon) chassisLeftDrive1);
        
        chassisLeftDrive2 = new Talon(1, 2);
	LiveWindow.addActuator("Chassis", "LeftDrive2", (Talon) chassisLeftDrive2);
        
        chassisLeftDrive3 = new Talon(1, 3);
	LiveWindow.addActuator("Chassis", "LeftDrive3", (Talon) chassisLeftDrive3);
        
        chassisRightDrive1 = new Talon(1, 4);
	LiveWindow.addActuator("Chassis", "RightDrive1", (Talon) chassisRightDrive1);
        
        chassisRightDrive2 = new Talon(1, 5);
	LiveWindow.addActuator("Chassis", "RightDrive2", (Talon) chassisRightDrive2);
        
        chassisRightDrive3 = new Talon(1, 6);
	LiveWindow.addActuator("Chassis", "RightDrive3", (Talon) chassisRightDrive3);
        
        chassisCompressor = new Compressor(1, 14, 1, 8);
	
        
        chassisShiftSpike = new Relay(1, 1);
	LiveWindow.addActuator("Chassis", "ShiftSpike", chassisShiftSpike);
        
        chassisLeftDriveEncoder = new Encoder(1, 5, 1, 6, false, EncodingType.k4X);
	LiveWindow.addSensor("Chassis", "LeftDriveEncoder", chassisLeftDriveEncoder);
        chassisLeftDriveEncoder.setDistancePerPulse(1.0);
        chassisLeftDriveEncoder.setPIDSourceParameter(PIDSourceParameter.kDistance);
        chassisLeftDriveEncoder.start();
        chassisRightDriveEncoder = new Encoder(1, 7, 1, 8, true, EncodingType.k4X);
	LiveWindow.addSensor("Chassis", "RightDriveEncoder", chassisRightDriveEncoder);
        chassisRightDriveEncoder.setDistancePerPulse(1.0);
        chassisRightDriveEncoder.setPIDSourceParameter(PIDSourceParameter.kDistance);
        chassisRightDriveEncoder.start();
        armArm1 = new Jaguar(1, 9);
	LiveWindow.addActuator("Arm", "Arm1", (Jaguar) armArm1);
        
        armArm2 = new Jaguar(1, 10);
	LiveWindow.addActuator("Arm", "Arm2", (Jaguar) armArm2);
        
        armArmPotentiometer = new AnalogChannel(1, 2);
	LiveWindow.addSensor("Arm", "ArmPotentiometer", armArmPotentiometer);
        
        shooterShooter1 = new Solenoid(1, 1);
	LiveWindow.addActuator("Shooter", "Shooter1", shooterShooter1);
        
        shooterShooter2 = new Solenoid(1, 2);
	LiveWindow.addActuator("Shooter", "Shooter2", shooterShooter2);
        
        shooterShooter3 = new Solenoid(1, 3);
	LiveWindow.addActuator("Shooter", "Shooter3", shooterShooter3);
        
        shooterShooter4 = new Solenoid(1, 4);
	LiveWindow.addActuator("Shooter", "Shooter4", shooterShooter4);
        
        shooterShooterUltrasonic = new AnalogChannel(1, 4);
	LiveWindow.addSensor("Shooter", "ShooterUltrasonic", shooterShooterUltrasonic);
        
        wingsWingSolenoid = new DoubleSolenoid(1, 7, 8);      
	
        
        wingsWingLeftLimitSwitch = new DigitalInput(1, 1);
	LiveWindow.addSensor("Wings", "WingLeftLimitSwitch", wingsWingLeftLimitSwitch);
        
        wingsWingRightLimitSwitch = new DigitalInput(1, 2);
	LiveWindow.addSensor("Wings", "WingRightLimitSwitch", wingsWingRightLimitSwitch);
        
        pickupPickup1 = new Victor(1, 7);
	LiveWindow.addActuator("Pickup", "Pickup1", (Victor) pickupPickup1);
        
        pickupPickup2 = new Victor(1, 8);
	LiveWindow.addActuator("Pickup", "Pickup2", (Victor) pickupPickup2);
        
        pickupCurrentSensor = new AnalogChannel(1, 3);
	LiveWindow.addSensor("Pickup", "CurrentSensor", pickupCurrentSensor);
        
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        
        LiveWindow.addActuator("Wings", "WingSolenoid", wingsWingSolenoid);
        chassisGyro = new BackgroundCalibratingGyro(1, 1);
	LiveWindow.addSensor("Chassis", "Gyro", chassisGyro);
        chassisGyro.setSensitivity(0.007);
    }
}
